"""xmlrpclib.Transport implementation
"""

import logging
<<<<<<< HEAD
<<<<<<< HEAD
import urllib.parse
import xmlrpc.client
from typing import TYPE_CHECKING, Tuple

from pip._internal.exceptions import NetworkConnectionError
from pip._internal.network.session import PipSession
from pip._internal.network.utils import raise_for_status

if TYPE_CHECKING:
    from xmlrpc.client import _HostType, _Marshallable
=======
=======
>>>>>>> a9d900c1457080d90d61291d4e50f857aa62fa23

# NOTE: XMLRPC Client is not annotated in typeshed as on 2017-07-17, which is
#       why we ignore the type on this import
from pip._vendor.six.moves import xmlrpc_client  # type: ignore
from pip._vendor.six.moves.urllib import parse as urllib_parse

from pip._internal.exceptions import NetworkConnectionError
from pip._internal.network.utils import raise_for_status
from pip._internal.utils.typing import MYPY_CHECK_RUNNING

if MYPY_CHECK_RUNNING:
    from typing import Dict
    from pip._internal.network.session import PipSession

<<<<<<< HEAD
>>>>>>> a9d900c1457080d90d61291d4e50f857aa62fa23
=======
>>>>>>> a9d900c1457080d90d61291d4e50f857aa62fa23

logger = logging.getLogger(__name__)


<<<<<<< HEAD
<<<<<<< HEAD
class PipXmlrpcTransport(xmlrpc.client.Transport):
=======
class PipXmlrpcTransport(xmlrpc_client.Transport):
>>>>>>> a9d900c1457080d90d61291d4e50f857aa62fa23
=======
class PipXmlrpcTransport(xmlrpc_client.Transport):
>>>>>>> a9d900c1457080d90d61291d4e50f857aa62fa23
    """Provide a `xmlrpclib.Transport` implementation via a `PipSession`
    object.
    """

<<<<<<< HEAD
<<<<<<< HEAD
    def __init__(
        self, index_url: str, session: PipSession, use_datetime: bool = False
    ) -> None:
        super().__init__(use_datetime)
        index_parts = urllib.parse.urlparse(index_url)
        self._scheme = index_parts.scheme
        self._session = session

    def request(
        self,
        host: "_HostType",
        handler: str,
        request_body: bytes,
        verbose: bool = False,
    ) -> Tuple["_Marshallable", ...]:
        assert isinstance(host, str)
        parts = (self._scheme, host, handler, None, None, None)
        url = urllib.parse.urlunparse(parts)
        try:
            headers = {"Content-Type": "text/xml"}
            response = self._session.post(
                url,
                data=request_body,
                headers=headers,
                stream=True,
            )
=======
=======
>>>>>>> a9d900c1457080d90d61291d4e50f857aa62fa23
    def __init__(self, index_url, session, use_datetime=False):
        # type: (str, PipSession, bool) -> None
        xmlrpc_client.Transport.__init__(self, use_datetime)
        index_parts = urllib_parse.urlparse(index_url)
        self._scheme = index_parts.scheme
        self._session = session

    def request(self, host, handler, request_body, verbose=False):
        # type: (str, str, Dict[str, str], bool) -> None
        parts = (self._scheme, host, handler, None, None, None)
        url = urllib_parse.urlunparse(parts)
        try:
            headers = {'Content-Type': 'text/xml'}
            response = self._session.post(url, data=request_body,
                                          headers=headers, stream=True)
<<<<<<< HEAD
>>>>>>> a9d900c1457080d90d61291d4e50f857aa62fa23
=======
>>>>>>> a9d900c1457080d90d61291d4e50f857aa62fa23
            raise_for_status(response)
            self.verbose = verbose
            return self.parse_response(response.raw)
        except NetworkConnectionError as exc:
            assert exc.response
            logger.critical(
                "HTTP error %s while getting %s",
<<<<<<< HEAD
<<<<<<< HEAD
                exc.response.status_code,
                url,
=======
                exc.response.status_code, url,
>>>>>>> a9d900c1457080d90d61291d4e50f857aa62fa23
=======
                exc.response.status_code, url,
>>>>>>> a9d900c1457080d90d61291d4e50f857aa62fa23
            )
            raise
