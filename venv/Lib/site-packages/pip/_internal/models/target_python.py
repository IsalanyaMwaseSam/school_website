import sys
<<<<<<< HEAD
<<<<<<< HEAD
from typing import List, Optional, Tuple

from pip._vendor.packaging.tags import Tag

from pip._internal.utils.compatibility_tags import get_supported, version_info_to_nodot
from pip._internal.utils.misc import normalize_version_info


class TargetPython:
=======
=======
>>>>>>> a9d900c1457080d90d61291d4e50f857aa62fa23

from pip._internal.utils.compatibility_tags import (
    get_supported,
    version_info_to_nodot,
)
from pip._internal.utils.misc import normalize_version_info
from pip._internal.utils.typing import MYPY_CHECK_RUNNING

if MYPY_CHECK_RUNNING:
    from typing import List, Optional, Tuple

    from pip._vendor.packaging.tags import Tag


class TargetPython(object):
<<<<<<< HEAD
>>>>>>> a9d900c1457080d90d61291d4e50f857aa62fa23
=======
>>>>>>> a9d900c1457080d90d61291d4e50f857aa62fa23

    """
    Encapsulates the properties of a Python interpreter one is targeting
    for a package install, download, etc.
    """

    __slots__ = [
        "_given_py_version_info",
<<<<<<< HEAD
<<<<<<< HEAD
        "abis",
        "implementation",
        "platforms",
=======
        "abi",
        "implementation",
        "platform",
>>>>>>> a9d900c1457080d90d61291d4e50f857aa62fa23
=======
        "abi",
        "implementation",
        "platform",
>>>>>>> a9d900c1457080d90d61291d4e50f857aa62fa23
        "py_version",
        "py_version_info",
        "_valid_tags",
    ]

    def __init__(
        self,
<<<<<<< HEAD
<<<<<<< HEAD
        platforms: Optional[List[str]] = None,
        py_version_info: Optional[Tuple[int, ...]] = None,
        abis: Optional[List[str]] = None,
        implementation: Optional[str] = None,
    ) -> None:
        """
        :param platforms: A list of strings or None. If None, searches for
            packages that are supported by the current system. Otherwise, will
            find packages that can be built on the platforms passed in. These
=======
=======
>>>>>>> a9d900c1457080d90d61291d4e50f857aa62fa23
        platform=None,  # type: Optional[str]
        py_version_info=None,  # type: Optional[Tuple[int, ...]]
        abi=None,  # type: Optional[str]
        implementation=None,  # type: Optional[str]
    ):
        # type: (...) -> None
        """
        :param platform: A string or None. If None, searches for packages
            that are supported by the current system. Otherwise, will find
            packages that can be built on the platform passed in. These
<<<<<<< HEAD
>>>>>>> a9d900c1457080d90d61291d4e50f857aa62fa23
=======
>>>>>>> a9d900c1457080d90d61291d4e50f857aa62fa23
            packages will only be downloaded for distribution: they will
            not be built locally.
        :param py_version_info: An optional tuple of ints representing the
            Python version information to use (e.g. `sys.version_info[:3]`).
            This can have length 1, 2, or 3 when provided.
<<<<<<< HEAD
<<<<<<< HEAD
        :param abis: A list of strings or None. This is passed to
            compatibility_tags.py's get_supported() function as is.
=======
        :param abi: A string or None. This is passed to compatibility_tags.py's
            get_supported() function as is.
>>>>>>> a9d900c1457080d90d61291d4e50f857aa62fa23
=======
        :param abi: A string or None. This is passed to compatibility_tags.py's
            get_supported() function as is.
>>>>>>> a9d900c1457080d90d61291d4e50f857aa62fa23
        :param implementation: A string or None. This is passed to
            compatibility_tags.py's get_supported() function as is.
        """
        # Store the given py_version_info for when we call get_supported().
        self._given_py_version_info = py_version_info

        if py_version_info is None:
            py_version_info = sys.version_info[:3]
        else:
            py_version_info = normalize_version_info(py_version_info)

<<<<<<< HEAD
<<<<<<< HEAD
        py_version = ".".join(map(str, py_version_info[:2]))

        self.abis = abis
        self.implementation = implementation
        self.platforms = platforms
=======
=======
>>>>>>> a9d900c1457080d90d61291d4e50f857aa62fa23
        py_version = '.'.join(map(str, py_version_info[:2]))

        self.abi = abi
        self.implementation = implementation
        self.platform = platform
<<<<<<< HEAD
>>>>>>> a9d900c1457080d90d61291d4e50f857aa62fa23
=======
>>>>>>> a9d900c1457080d90d61291d4e50f857aa62fa23
        self.py_version = py_version
        self.py_version_info = py_version_info

        # This is used to cache the return value of get_tags().
<<<<<<< HEAD
<<<<<<< HEAD
        self._valid_tags: Optional[List[Tag]] = None

    def format_given(self) -> str:
=======
=======
>>>>>>> a9d900c1457080d90d61291d4e50f857aa62fa23
        self._valid_tags = None  # type: Optional[List[Tag]]

    def format_given(self):
        # type: () -> str
<<<<<<< HEAD
>>>>>>> a9d900c1457080d90d61291d4e50f857aa62fa23
=======
>>>>>>> a9d900c1457080d90d61291d4e50f857aa62fa23
        """
        Format the given, non-None attributes for display.
        """
        display_version = None
        if self._given_py_version_info is not None:
<<<<<<< HEAD
<<<<<<< HEAD
            display_version = ".".join(
=======
            display_version = '.'.join(
>>>>>>> a9d900c1457080d90d61291d4e50f857aa62fa23
=======
            display_version = '.'.join(
>>>>>>> a9d900c1457080d90d61291d4e50f857aa62fa23
                str(part) for part in self._given_py_version_info
            )

        key_values = [
<<<<<<< HEAD
<<<<<<< HEAD
            ("platforms", self.platforms),
            ("version_info", display_version),
            ("abis", self.abis),
            ("implementation", self.implementation),
        ]
        return " ".join(
            f"{key}={value!r}" for key, value in key_values if value is not None
        )

    def get_tags(self) -> List[Tag]:
=======
=======
>>>>>>> a9d900c1457080d90d61291d4e50f857aa62fa23
            ('platform', self.platform),
            ('version_info', display_version),
            ('abi', self.abi),
            ('implementation', self.implementation),
        ]
        return ' '.join(
            '{}={!r}'.format(key, value) for key, value in key_values
            if value is not None
        )

    def get_tags(self):
        # type: () -> List[Tag]
<<<<<<< HEAD
>>>>>>> a9d900c1457080d90d61291d4e50f857aa62fa23
=======
>>>>>>> a9d900c1457080d90d61291d4e50f857aa62fa23
        """
        Return the supported PEP 425 tags to check wheel candidates against.

        The tags are returned in order of preference (most preferred first).
        """
        if self._valid_tags is None:
            # Pass versions=None if no py_version_info was given since
            # versions=None uses special default logic.
            py_version_info = self._given_py_version_info
            if py_version_info is None:
                version = None
            else:
                version = version_info_to_nodot(py_version_info)

            tags = get_supported(
                version=version,
<<<<<<< HEAD
<<<<<<< HEAD
                platforms=self.platforms,
                abis=self.abis,
=======
                platform=self.platform,
                abi=self.abi,
>>>>>>> a9d900c1457080d90d61291d4e50f857aa62fa23
=======
                platform=self.platform,
                abi=self.abi,
>>>>>>> a9d900c1457080d90d61291d4e50f857aa62fa23
                impl=self.implementation,
            )
            self._valid_tags = tags

        return self._valid_tags
